name: Build All Apps in Dev Branch

on:
  push:
    branches: [Dev]
  workflow_dispatch:

env:
  PNPM_STORE_PATH: ~/.pnpm-store
  TAURI_TARGET: "release"
  CI: "true"

jobs:
  setup:
    name: Setup Environment
    runs-on: windows-latest
    outputs:
      cache-hit: ${{ steps.pnpm-cache.outputs.cache-hit }}
      needs-install: ${{ steps.check-changes.outputs.changed || steps.pnpm-cache.outputs.cache-hit != 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Detect package manager
        id: detect-pm
        shell: bash
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "PM=pnpm" >> $GITHUB_OUTPUT
            echo "STORE_PATH=~/.pnpm-store" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "PM=yarn" >> $GITHUB_OUTPUT
          else
            echo "PM=npm" >> $GITHUB_OUTPUT
          fi

      - name: Check for changes
        id: check-changes
        shell: pwsh
        run: |
          $changed = git diff --name-only HEAD^ HEAD | Select-String -Pattern "package\.json|pnpm-lock\.yaml|yarn\.lock"
          echo "changed=$($changed -ne $null)" >> $env:GITHUB_OUTPUT

      - name: Cache package manager
        id: pnpm-cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.detect-pm.outputs.STORE_PATH || '~/.cache' }}
          key: ${{ runner.os }}-${{ steps.detect-pm.outputs.PM }}-${{ hashFiles('**/lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-${{ steps.detect-pm.outputs.PM }}-

      - name: Install package manager
        if: steps.detect-pm.outputs.PM == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          run_install: false

  build:
    needs: setup
    name: Build Applications
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: ${{ needs.setup.outputs.STORE_PATH || '~/.cache' }}
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install pnpm
        if: needs.setup.outputs.PM == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        if: needs.setup.outputs.needs-install == 'true'
        shell: bash
        run: |
          case "${{ needs.setup.outputs.PM }}" in
            pnpm) pnpm install --frozen-lockfile --prefer-offline ;;
            yarn) yarn install --frozen-lockfile --prefer-offline ;;
            npm)  npm ci ;;
          esac

      - name: Build with Turbo
        if: needs.setup.outputs.PM == 'pnpm'
        run: pnpm turbo run build --output-logs=errors-only
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"

      - name: Build Tauri (Windows)
        if: runner.os == 'Windows' && needs.setup.outputs.PM == 'pnpm'
        run: pnpm tauri build --target ${{ env.TAURI_TARGET }}
        working-directory: ./apps/app
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

  artifacts:
    needs: build
    name: Package Artifacts
    runs-on: windows-latest
    steps:
      - name: Create release archive
        shell: pwsh
        run: |
          $version = (Get-Content ./apps/app/src-tauri/tauri.conf.json | ConvertFrom-Json).package.version
          $date = (Get-Date).ToString("yyyyMMdd")
          
          if (Test-Path ./apps/doc/dist) {
            Compress-Archive -Path ./apps/doc/dist/* -DestinationPath "./doc-dist-$version-$date.zip"
          }
          
          if (Test-Path ./apps/app/src-tauri/target/release/bundle/msi/*.msi) {
            Get-ChildItem ./apps/app/src-tauri/target/release/bundle/msi/*.msi | 
              Compress-Archive -DestinationPath "./app-msi-$version-$date.zip"
          }

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: |
            ./doc-dist-*.zip
            ./app-msi-*.zip
          retention-days: 7

  deploy:
    needs: artifacts
    name: Deploy to Staging
    if: github.ref == 'refs/heads/Dev'
    runs-on: windows-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-packages
          path: ./artifacts

      - name: Deploy to Azure
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az storage blob upload-batch \
              --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
              --destination ${{ secrets.AZURE_CONTAINER }} \
              --source ./artifacts \
              --pattern "*.zip" \
              --auth-mode key